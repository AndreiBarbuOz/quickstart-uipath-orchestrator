{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates a cluster to provide high availability (qs-1r2g411te)",
    "Parameters": {
        "PrivateSubnetIDs": {
            "Description": "Comma separated Private Subnet IDs where Orchestrator VMs need to be launched",
            "Type": "String"
        }, 
        "PublicSubnetIDs": {
            "Description": "Comma separated Public Subnet IDs where Bastion hosts need to be launched",
            "Type": "String",
            "Default": "-"
        },        
        "GatewaySecurityGroup": {
            "Description": "Security Group behind which Storage Gateway VMs would be placed",
            "Type": "String"
        },      
        "KeyPairName"   : {
            "Description": "EC2 Instance Key pair name",
            "Type": "String"
        },       
        "InstanceType": {
            "Description": "Orchestrator Instance type",
            "Type": "String"
        },                                  
        "FindAMIFunctionArn": {
            "Description": "ARN for Lambda function used to find AMI by name",
            "Type": "String"
        },
        "AdminPassword": {
            "Description": "Windows Administrator password to login as",
            "Type": "String",
            "NoEcho": "true",
            "Default": ""
        },         
        "RobotRole" : {
            "Type" : "String",
            "Default" : "localuser",
            "AllowedValues" : ["localuser", "localadmin"],
            "Description" : "Choose a role for the Robot application: localuser only for RDP permission or localadmin for Administrator permission. Default is localuser."
          },
        "UiRobotName": {
            "Description": "UiPath Robot name.",
            "Type": "String",
            "Default": "awesome.robot"
        },
        "UiRobotPassword": {
            "Description": "UiPath Robot password",
            "Type": "String",
            "NoEcho": "true"
        },
        "LocalVMName": {
            "Description": "Local VM name.",
            "Type": "String",
            "Default": "awesomerobot01"
        },
        "UiRobotType": {
            "Type" : "String",
            "Default" : "Attended",
            "AllowedValues" : ["Attended", "Unattended", "Development" , "Nonproduction"],
            "Description" : "Robot type : Attended, Unattended, Development or Nonproduction."
        },
        "OrchestratorURL": {
            "Type" : "String",
            "Description" : "URL of an existing and licensed Orchestrator."
        },
        "OrchestratorTenant": {
            "Type" : "String",
            "Description" : "Tenant name where the Robot will be created."
        },
        "OrchestratorAPIUser": {
            "Type" : "String",
            "Description" : "Orchestrator API username with role to create/add Robot."
        },
        "OrchestratorAPIPassword": {
            "Type" : "String",
            "Description" : "Orchestrator API password.",
            "NoEcho": "true"
        }
    },
    "Conditions": {
        "BastionCondition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        { "Fn::Select" : [ "0", { "Fn::Split": [",", {"Ref": "PublicSubnetIDs"}]}] },
                        "-"
                    ]
                }
            ]            
        } 
    },     
    "Resources": {
		"HostInstanceAMI": {
            "Type": "Custom::HostInstanceAMI",
            "Properties": {
                    "ServiceToken": { "Ref" : "FindAMIFunctionArn" },
                    "RegionName": { "Ref" : "AWS::Region" },                    
                    "ImageName": "Windows_Server-2019-English-Full-Base-*",
                    "Architecture": "x86_64",
                    "VirtualizationType": "hvm",
                    "Owners": "amazon"
            }
        },
        "UiPathRobot": {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "ImageId" : { "Ref" : "HostInstanceAMI"},
                "InstanceType" : {"Ref": "InstanceType"},
                "KeyName" : {"Ref": "KeyPairName"},
                "SecurityGroupIds" : [ {"Ref": "GatewaySecurityGroup"} ],
                "SubnetId" : { "Fn::Select" : [ "0", { "Fn::Split": [",", {"Ref": "PrivateSubnetIDs"}]}] },
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [ "\n", [
                            "<powershell>",  
                    { "Fn::Sub": [ "$robotRole = \"${RobotRole}\"", { "RobotRole": {"Ref" : "RobotRole" }} ]},
                    "if($robotRole -eq \"localuser\") { ",
                    "  $localRobotRole = \"Remote Desktop Users\" ",
                    "} else { $localRobotRole = \"Administrators\" } ",
                    { "Fn::Sub": [ "$UserName = \"${UiRobotName}\"", { "UiRobotName": {"Ref" : "UiRobotName" }} ]},
                    { "Fn::Sub": [ "$Password = \"${UiRobotPassword}\"", { "UiRobotPassword": {"Ref" : "UiRobotPassword" }} ]},
                    "$Computer = [ADSI]\"WinNT://$Env:COMPUTERNAME,Computer\" ",
                    "$User = $Computer.Create(\"User\", $UserName) ",
                    "$User.SetPassword(\"$Password\") ",
                    "$User.SetInfo() ",
                    "$User.FullName = $UserName",
                    "$User.SetInfo()",
                    "$User.Put(\"Description\", \"UiPath Robot Account\") ",
                    "$User.SetInfo() ",
                    "$User.UserFlags = 65536 ",
                    "$User.SetInfo() ",
                    "$Group = [ADSI](\"WinNT://$Env:COMPUTERNAME/$localRobotRole,Group\") ",
                    "$Group.add(\"WinNT://$Env:COMPUTERNAME/$UserName\") ",
                    { "Fn::Sub": [ "$newMachineName = \"${LocalVMName}\"", { "LocalVMName": {"Ref" : "LocalVMName" }} ]},
                    "Rename-Computer -NewName $newMachineName -Force ", 
                    "$temp = \"C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Scripts\" ",
                    "$link = \"https://raw.githubusercontent.com/UiPath/Infrastructure/master/Setup/Install-UiRobot.ps1\" ",
                    "$file = \"Install-UiRobot.ps1\"  ",
                    "Set-Location -Path $temp  ",
                    "Set-ExecutionPolicy Unrestricted -force ",
                    "Invoke-WebRequest -Uri $link -OutFile $file ",
                    {
                        "Fn::Join" : [ " ", [
                            "powershell.exe -ExecutionPolicy Bypass", 
                            "-File \"C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Scripts\\Install-UiRobot.ps1\"",
                            { "Fn::Sub": [ "-orchestratorUrl \"${OrchestratorURL}\"", { "OrchestratorURL": {"Ref" : "OrchestratorURL" }} ]},
                            { "Fn::Sub": [ "-Tennant \"${OrchestratorTenant}\"", { "OrchestratorTenant": {"Ref" : "OrchestratorTenant" }} ]},
                            { "Fn::Sub": [ "-orchAdmin \"${OrchestratorAPIUser}\"", { "OrchestratorAPIUser": {"Ref" : "OrchestratorAPIUser" }} ]},
                            { "Fn::Sub": [ "-orchPassword \"${OrchestratorAPIPassword}\"", { "OrchestratorAPIPassword": {"Ref" : "OrchestratorAPIPassword" }} ]},
                            { "Fn::Sub": [ "-adminUsername \"${UiRobotName}\"", { "UiRobotName": {"Ref" : "UiRobotName" }} ]},
                            { "Fn::Sub": [ "-machinePassword \"${UiRobotPassword}\"", { "UiRobotPassword": {"Ref" : "UiRobotPassword" }} ]},
                            { "Fn::Sub": [ "-RobotType \"${UiRobotType}\"", { "UiRobotType": {"Ref" : "UiRobotType" }} ]},
                            { "Fn::Sub": [ "-machineName \"${LocalVMName}\"", { "LocalVMName": {"Ref" : "LocalVMName" }} ]},
                            "-HostingType \"Standard\""
                            ]]
                    },
                    "shutdown /r /f /t 5 /c \"forced reboot\"", 
                    "</powershell>"
                    
                    ]]
                    }
                },                
                "Tags" : [ { "Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "UiPathRobot",{"Ref" : "LocalVMName" } ]]} } ]
            }
        },         
        "BastionHost": {
            "Type" : "AWS::EC2::Instance",
            "Condition" : "BastionCondition",
            "Properties" : {
                "ImageId" : { "Ref" : "HostInstanceAMI"},
                "InstanceType" : {"Ref": "InstanceType"},
                "KeyName" : {"Ref": "KeyPairName"},
                "NetworkInterfaces" : [ 
                    {
                        "AssociatePublicIpAddress" : true,
                        "DeleteOnTermination" : true,
                        "DeviceIndex" : "0",
                        "GroupSet" : [ {"Ref": "GatewaySecurityGroup"} ],
                        "SubnetId" : { "Fn::Select" : [ "0", { "Fn::Split": [",", {"Ref": "PublicSubnetIDs"}]}] }
                    }                      
                ],
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [ "\n", [                         
                            "<script>",
                            "    winrm quickconfig -q & winrm set winrm/config/winrs @{MaxMemoryPerShellMB=\"300\"} & winrm set winrm/config @{MaxTimeoutms=\"1800000\"} & winrm set winrm/config/service @{AllowUnencrypted=\"true\"} & winrm set winrm/config/service/auth @{Basic=\"true\"} & winrm/config @{MaxEnvelopeSizekb=\"8000kb\"}",
                            "</script>",
                            "<powershell>",
                            "netsh advfirewall firewall add rule name=\"WinRM in\" protocol=TCP dir=in profile=any localport=5985 remoteip=any localip=any action=allow",                            
                            "$admin = [ADSI](\"WinNT://./administrator, user\")",
                            { "Fn::Sub": [ "$admin.SetPassword(\"${AdminPassword}\")", { "AdminPassword": {"Ref" : "AdminPassword" }} ]},                                
                            "</powershell>"
                        ] ]
                    }
                },                
                "Tags" : [ { "Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "BastionHost" ]]} } ]
            }
        }                                           
    },
    "Outputs": {
        "BastionHostID": {
            "Value": {"Ref" : "BastionHost"},
            "Description": "ID of BastionHost VM in Public Subnet 1",
            "Condition" : "BastionCondition"
        },
        "BastionHostPrivateIP": {
            "Value": {  "Fn::GetAtt": [ "BastionHost", "PrivateIp" ] },
            "Description": "Private IP of BastionHost in Public Subnet 1",
            "Condition" : "BastionCondition"
        },   
        "BastionHostPublicIP": {
            "Value": {  "Fn::GetAtt": [ "BastionHost", "PublicIp" ] },
            "Description": "Private IP of BastionHost in Public Subnet 1",
            "Condition" : "BastionCondition"
        },
        "UiPathRobotPrivateIP": {
            "Value": {  "Fn::GetAtt": [ "UiPathRobot", "PrivateIp" ] },
            "Description": "Private IP of UiPathRobot in Public Subnet 1"
        }                                                                         
    }
}